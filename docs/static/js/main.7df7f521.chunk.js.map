{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","onChange","target","value","type","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","pattern","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAMlB,SACI,uBACIO,SAjBc,SAACL,GACvBF,EAAcE,EAAEM,OAAOC,QAiBfC,KAAK,OACLD,MAAOV,O,QCxBVY,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAGrC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAOF,EAAKG,IAAOJ,IACxB,4BAAIA,Q,uBCPHK,EAAO,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,4DAEJ,mCACD,GACRC,EAAUC,UAAUH,GAGpBL,EAPa,iDAOmCO,EAPnC,kBAGL,GAHK,oBAEJ,oCAFI,SASAE,MAAMT,GATN,cASbU,EATa,gBAWIA,EAAKC,OAXT,uBAWXC,EAXW,EAWXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHjB,GAAIiB,EAAIjB,GACRC,MAAOgB,EAAIhB,MACXC,IAAKe,EAAIC,OAAOC,iBAAiBjB,QAjBtB,kBAqBZa,GArBY,4CAAH,sDCEPK,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EAEZrB,mBAEtB,CACI4B,KAAM,GACNO,SAAS,IANqB,mBAE/BC,EAF+B,KAExBC,EAFwB,KA0BtC,OAhBAC,qBAAU,WAENlB,EAAQC,GAAUkB,MAEd,SAAAC,GAEIH,EAAS,CAAET,KAAMY,EAAML,SAAS,SAOxC,CAACd,IAGEe,EDxB4BK,CAAapB,GAAjCW,EAFsB,EAE7BJ,KAAeO,EAFc,EAEdA,QAEvB,OACI,qCACI,6BAAKd,IAEHc,GAAW,mBAAGlB,UAAU,mCAAb,uBAEb,qBAAKA,UAAU,YAAf,SAEQe,EAAOF,KAAI,SAAAC,GACP,OAAO,cAAC,EAAD,eAECA,GADCA,EAAIjB,aEiBtB4B,EA7BM,SAAC,GAAQ,qBAEU1C,mBAAS,CAAC,cAFrB,mBAElB2C,EAFkB,KAEN5C,EAFM,KAWzB,OAAQ,qCACJ,gDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ4C,EAAWb,KACP,SAACT,EAAUuB,GACP,OAAO,cAAC,EAAD,CAA0BvB,SAAYA,GAAtBA,YCbhCwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.7df7f521.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [ inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                onChange={handleInputChange}\r\n                type=\"text\"\r\n                value={inputValue}\r\n\r\n            />\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src = {url} alt = {title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","\r\nexport const getGifs = async (category) => {\r\n\r\n    const apiKey = 'bCEvlhqahDLLy3qdEGiCGK0WIUDd41gt';\r\n    const limit = 10;\r\n    const pattern = encodeURI(category);\r\n\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${pattern}&limit=${limit}&api_key=${apiKey}`\r\n\r\n    const resp = await fetch(url);\r\n\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs\r\n}","import { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data : images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\"> Loading </p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => {\r\n                        return <GifGridItem\r\n                            key={img.id}\r\n                            {...img} />\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState(\r\n\r\n        {\r\n            data: [],\r\n            loading: true\r\n        }\r\n    )\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category).then(\r\n\r\n            imgs => {\r\n\r\n                setState({ data: imgs, loading: false })\r\n\r\n            }\r\n\r\n        )\r\n\r\n    },\r\n        [category]\r\n    )\r\n\r\n    return state;\r\n\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nconst GifExpertApp = ({}) => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    // const handleAdd = () => {\r\n\r\n    //     // setCategories([...categories, 'Pokemon'] );\r\n    //     setCategories( cats => [...cats, 'Pokemon 2'] );\r\n\r\n    // }\r\n\r\n    return (<> \r\n        <h2>Gif Expert app</h2>\r\n        <AddCategory setCategories= {setCategories} />\r\n        <hr/>\r\n        \r\n        <ol>\r\n            {\r\n                categories.map( \r\n                    (category, i) => {\r\n                        return <GifGrid key = {category} category = {category} />\r\n                    } )\r\n            }\r\n        </ol>\r\n\r\n    </>);}\r\n\r\n\r\n\r\nexport default GifExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GifExperApp from \"./GifExpertApp\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <GifExperApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}